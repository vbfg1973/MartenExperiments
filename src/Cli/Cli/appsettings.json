{
    "Logging": {
        "LogLevel": {
            "Default": "Debug",
            "System": "Information",
            "Microsoft": "Information",
            "Npgsql": "Warning",
            "Marten": "Warning"
        }
    },
    "Serilog": {
        "MinimumLevel": {
            "Default": "Debug",
            "Override": {
                "Microsoft": "Warning",
                "Microsoft.Hosting.Lifetime": "Information",
                "Npgsql": "Warning",
                "Marten": "Warning"
            }
        },
        "Filter": [
            {
                "Name": "ByExcluding",
                "Args": {
                    "expression": "(EndsWith(RequestPath, '/health') and StatusCode=200) OR (EndsWith(RequestPath, '/healthchecks') and StatusCode=200) OR (EndsWith(RequestPath, '/healthcheck') and StatusCode=200)"
                }
            }
        ],
        "WriteTo": [
            {
                "Name": "Seq",
                "Args": {
                    "serverUrl": "http://localhost:5341",
                    "outputTemplate": "{Timestamp:yyyy-MM-ddTHH:mm:ss} [{Level:u3}] [{System}] [{MachineName}] [{SourceContext}] [{Method}] {Message}{Exception}{NewLine}",
                    "period": 1,
                    "batchPostingLimit": 10
                }
            },
            {
                "Name": "Console",
                "Args": {
                    "outputTemplate": "{Timestamp:yyyy-MM-ddTHH:mm:ss} [{Level:u3}] [{System}] [{MachineName}] [{SourceContext}] [{Method}] {Message}{Exception}{NewLine}"
                }
            }
        ],
        "Enrich": [
            "FromLogContext",
            "WithMachineName",
            "WithThreadId"
        ],
        "Properties": {
            "Application": "MartenExperiments"
        }
    },
    "EventStore": {
        "ConnectionString": "PORT = 5432; HOST = localhost; TIMEOUT = 15; POOLING = True; MINPOOLSIZE = 1; MAXPOOLSIZE = 100; COMMANDTIMEOUT = 20; DATABASE = 'postgres'; PASSWORD = 'Password12!'; USER ID = 'postgres'",
        "WriteModelSchema": "membership_write",
        "ReadModelSchema": "membership_read"
    }
}
